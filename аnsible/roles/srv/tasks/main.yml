---

- name: Добавим в файл hosts наши серверы
  blockinfile:
    path: /etc/hosts
    block: |
      {% for host in groups['kube_servers'] %}
      {{ hostvars[host].ansible_ssh_host }} {{ hostvars[host].ansible_host }}
      {% endfor %}
      {% for host in groups['srv_servers'] %}
      {{ hostvars[host].ansible_ssh_host }} {{ hostvars[host].ansible_host }}
      {% endfor %}

- name: Задаем имя серверу из инвентарного файла
  hostname:
    name: "{{ hostvars[inventory_hostname].ansible_host }}"

- name: Настройка репозитория для gitlab
  shell: curl -L "https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh" | sudo bash

- name: Устанавливаем Docker и Gitlab Runner
  package:
    name:
      - docker
      - docker.io
      - gitlab-runner
    state: present

- name: Разрешаем автозапуск сервисов и стартуем их
  systemd:
    name: "{{ item }}"
    enabled: yes
    state: restarted
  loop:
    - docker
    - gitlab-runner

- name: Добавляем пользователя gitlab-runner в группу docker
  user:
    name: gitlab-runner
    groups: docker
    append: yes

- name: Импортируем ключ GPG репозитория kubernetes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Добавляем репозиторий kubernetes
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    filename: kubernetes

- name: Устанавливаем kubectl
  apt:
    name: kubectl
    state: present
    update_cache: yes

- name: Распаковка helm
  unarchive:
    src: "https://get.helm.sh/helm-v{{ helm_version }}-linux-amd64.tar.gz"
    dest: /tmp/
    remote_src: yes
    creates: /usr/local/bin/helm

- name: Установка helm
  shell: test -f /tmp/linux-amd64/helm && (mv /tmp/linux-amd64/helm /usr/local/bin/ && chmod +x /usr/local/bin/helm) || true

- name: Настраиваем системную переменную для конфигурационного файла kubernetes/admin.conf
  lineinfile:
    path: /etc/environment
    line: export KUBECONFIG=/etc/kubernetes/admin.conf

- name: Настройка безопасности
  block:
    - name: Разрешаем порты TCP с помощью IPTABLES
      iptables:
        chain: INPUT
        rule_num: '1'
        action: insert
        protocol: tcp
        jump: ACCEPT
        destination_port: "{{ item }}"
      loop: [ '9090', '9093', '9094', '9100' ]

    - name: Разрешаем порты UDP с помощью IPTABLES
      iptables:
        chain: INPUT
        rule_num: '1'
        action: insert
        protocol: udp
        jump: ACCEPT
        destination_port: '9094'

- name: Создаем пользователя prometheus
  user:
    name: prometheus
    create_home: no
    shell: /bin/false

- name: Создаем папки для приложения prometheus
  file:
    path: "{{ item }}"
    state: directory
    owner: prometheus
    group: prometheus
  loop:
    - '/tmp/prometheus'
    - '/etc/prometheus'
    - '/var/lib/prometheus'

- name: Скачиваем и распаковываем бинарник Prometheus
  unarchive:
    src: https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz
    dest: /tmp/prometheus
    creates: /tmp/prometheus/prometheus-{{ prometheus_version }}.linux-amd64
    remote_src: yes

- name: Копируем бинарный файл в /usr/local/bin
  copy:
    src: /tmp/prometheus/prometheus-{{ prometheus_version }}.linux-amd64/{{ item }}
    dest: /usr/local/bin/
    remote_src: yes
    mode: preserve
    owner: prometheus
    group: prometheus
  loop: [ 'prometheus', 'promtool' ]

- name: Копируем конфиги в /etc/prometheus
  copy:
    src: /tmp/prometheus/prometheus-{{ prometheus_version }}.linux-amd64/{{ item }}
    dest: /etc/prometheus/
    remote_src: yes
    mode: preserve
    owner: prometheus
    group: prometheus
  loop: [ 'console_libraries', 'consoles' ]

- name: Копируем основной конфиг в /etc/prometheus
  template:
    src: prometheus.yml.j2
    dest: /etc/prometheus/prometheus.yml
    owner: prometheus
    group: prometheus
  notify: prometheus reload

- name: Копируем конфиг для правил алертов в /etc/prometheus
  copy:
    src: alert.rules.yml
    dest: /etc/prometheus/alert.rules.yml
    owner: prometheus
    group: prometheus
  notify: prometheus reload

- name: Создаем юнит systend
  copy:
    src: prometheus.service
    dest: /etc/systemd/system/
  notify:
    - systemd reload

- name: Стартуем сервис prometheus
  systemd:
    name: prometheus
    state: started
    enabled: yes

- name: Создаем пользователя для Alertmanager
  user:
    name: alertmanager
    create_home: no
    shell: /bin/false

- name: Создаем каталоги для Alertmanager
  file:
    path: "{{ item }}"
    state: directory
    owner: alertmanager
    group: alertmanager
  loop:
    - '/tmp/alertmanager'
    - '/etc/alertmanager'
    - '/var/lib/prometheus/alertmanager'

- name: Скачиваем и распаковываем Alertmanager
  unarchive:
    src: https://github.com/prometheus/alertmanager/releases/download/v{{ alertmanager_version }}/alertmanager-{{ alertmanager_version }}.linux-amd64.tar.gz
    dest: /tmp/alertmanager
    creates: /tmp/alertmanager/alertmanager-{{ alertmanager_version }}.linux-amd64
    remote_src: yes

- name: Копируем бинарник alertmanager в /usr/local/bin
  copy:
    src: /tmp/alertmanager/alertmanager-{{ alertmanager_version }}.linux-amd64/{{ item }}
    dest: /usr/local/bin/
    remote_src: yes
    mode: preserve
    owner: alertmanager
    group: alertmanager
  loop: [ 'alertmanager', 'amtool' ]

- name: Копируем конфиг в /etc/alertmanager
  template:
    src: alertmanager.yml.j2
    dest: /etc/alertmanager/alertmanager.yml
    owner: alertmanager
    group: alertmanager
  notify: alertmanager reload

- name: Создаем юнит Systemd
  copy:
    src: alertmanager.service
    dest: /etc/systemd/system/
  notify: systemd reload

- name: Запускаем сервис для alertmanager
  systemd:
    name: alertmanager
    state: started
    enabled: yes

- name: Создаем каталог для Blackbox Exporter
  file:
    path: /etc/blackbox
    state: directory
    owner: alertmanager
    group: alertmanager

- name: Создаем пользователя для Blackbox Exporter
  user:
    name: blackbox
    create_home: no
    shell: /bin/false

- name: Создаем каталог для Blackbox Exporter
  file:
    path: /tmp/blackbox_exporter
    state: directory
    owner: blackbox
    group: blackbox

- name: Скачиваем и распаковываем Blackbox Exporter
  unarchive:
    src: https://github.com/prometheus/blackbox_exporter/releases/download/v{{ blackbox_version }}/blackbox_exporter-{{ blackbox_version }}.linux-amd64.tar.gz
    dest: /tmp/blackbox_exporter
    creates: /tmp/blackbox_exporter/blackbox_exporter-{{ blackbox_version }}.linux-amd64
    remote_src: yes

- name: Копируем бинарник blackbox_exporter в /usr/local/bin
  copy:
    src: /tmp/blackbox_exporter/blackbox_exporter-{{ blackbox_version }}.linux-amd64/blackbox_exporter
    dest: /usr/local/bin/
    remote_src: yes
    mode: preserve
    owner: blackbox
    group: blackbox

- name: Создаем юнит Systemd
  copy:
    src: blackbox_exporter.service
    dest: /etc/systemd/system/
  notify:
    - systemd reload

- name: Копируем конфиг в /etc/blackbox
  copy:
    src: blackbox.yml
    dest: /etc/blackbox/blackbox.yml
    owner: blackbox
    group: blackbox
  notify: blackbox reload

- name: Запускаем сервис для blackbox_exporter
  systemd:
    name: blackbox_exporter
    state: started
    enabled: yes

- name: Разрешаем порт 3000 для Графаны
  iptables:
    chain: INPUT
    rule_num: '1'
    action: insert
    protocol: tcp
    jump: ACCEPT
    destination_port: '3000'

- name: Устанавливаем ключ репозитория Grafana
  apt_key:
    url: https://packages.grafana.com/gpg.key
    state: present

- name: Добавляем репозиторий для графаны
  apt_repository:
    repo: deb https://packages.grafana.com/oss/deb stable main
    state: present

- name: Устанавливаем графану
  apt:
    name: grafana
    state: present
  notify:
    - grafana systemd

- name: Устанавливаем postfix
  package:
    name: postfix
    state: present

- name: Запускаем postfix
  systemd:
    name: postfix
    state: started
    enabled: yes
